@page
@model AdminReportsIndexModel
@using MultikinoWeb.Filters
@attribute [AdminAuthorization]
@{
    ViewData["Title"] = "Raporty i statystyki";
}

<h2><i class="fas fa-chart-bar me-2"></i>Raporty i statystyki</h2>


<div class="card mb-4">
    <div class="card-header">
        <h5><i class="fas fa-calendar-alt me-2"></i>Okres raportowania</h5>
    </div>
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Data od:</label>
                <input asp-for="StartDate" class="form-control" type="date" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Data do:</label>
                <input asp-for="EndDate" class="form-control" type="date" />
            </div>
            <div class="col-md-3">
                <label class="form-label">&nbsp;</label>
                <button type="submit" class="btn btn-primary w-100">
                    <i class="fas fa-search me-1"></i>Wygeneruj raport
                </button>
            </div>
            <div class="col-md-3">
                <label class="form-label">&nbsp;</label>
                <a href="?StartDate=@DateTime.Today.AddDays(-30).ToString("yyyy-MM-dd")&EndDate=@DateTime.Today.ToString("yyyy-MM-dd")"
                   class="btn btn-outline-secondary w-100">
                    Ostatnie 30 dni
                </a>
            </div>
        </form>
    </div>
</div>

@if (Model.RevenueReport != null)
{
    
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <h3>@Model.RevenueReport.TotalRevenue.ToString("C")</h3>
                    <p class="mb-0">Łączny przychód</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <h3>@Model.RevenueReport.TotalBookings</h3>
                    <p class="mb-0">Liczba rezerwacji</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <h3>@Model.RevenueReport.TotalTickets</h3>
                    <p class="mb-0">Sprzedanych biletów</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <h3>@Model.RevenueReport.AverageTicketPrice.ToString("C")</h3>
                    <p class="mb-0">Średnia cena biletu</p>
                </div>
            </div>
        </div>
    </div>

    
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line me-2"></i>Przychody dzienne</h5>
                </div>
                <div class="card-body">
                    <canvas id="dailyRevenueChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie me-2"></i>Przychody według sal</h5>
                </div>
                <div class="card-body">
                    <canvas id="hallRevenueChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>

    
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-film me-2"></i>Najbardziej dochodowe filmy</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Film</th>
                                    <th>Przychód</th>
                                    <th>Bilety</th>
                                    <th>Rezerwacje</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var movie in Model.RevenueReport.RevenueByMovie.Take(10))
                                {
                                    <tr>
                                        <td>@movie.Movie.Title</td>
                                        <td class="text-success fw-bold">@movie.Revenue.ToString("C")</td>
                                        <td>@movie.Tickets</td>
                                        <td>@movie.Bookings</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-couch me-2"></i>Wykorzystanie sal</h5>
                </div>
                <div class="card-body">
                    @if (Model.HallUtilization.Any())
                    {
                        @foreach (var hall in Model.HallUtilization)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between">
                                    <span><strong>@hall.Hall.HallName</strong></span>
                                    <span>@hall.UtilizationPercentage.ToString("F1")%</span>
                                </div>
                                <div class="progress">
                                    <div class="progress-bar" style="width: @hall.UtilizationPercentage%"></div>
                                </div>
                                <small class="text-muted">
                                    @hall.BookedSeats / @hall.TotalCapacity miejsc w @hall.TotalScreenings seansach
                                </small>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @if (Model.RevenueReport != null)
    {
        <script>
            const chartColors = {
                paynesGray: '#4f6d7a',
                columbiaBlue: '#c0d6df',
                aliceBlue: '#dbe9ee',
                trueBlue: '#4a6fa5',
                lapisLazuli: '#166088',
                paynesGrayLight: '#6b8490',
                trueBlueDark: '#3a5a85',
                lapisLazuliLight: '#1f7ba8'
            };

            const dailyCtx = document.getElementById('dailyRevenueChart').getContext('2d');
            new Chart(dailyCtx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.RevenueReport.DailyRevenue.Select(d => d.Date.ToString("dd.MM")).ToArray())),
                    datasets: [{
                        label: 'Przychód dzienny',
                        data: @Html.Raw(Json.Serialize(Model.RevenueReport.DailyRevenue.Select(d => d.Revenue).ToArray())),
                        borderColor: chartColors.trueBlue,
                        backgroundColor: chartColors.trueBlue + '40', // 40 = 25% opacity
                        pointBackgroundColor: chartColors.lapisLazuli,
                        pointBorderColor: chartColors.lapisLazuli,
                        pointHoverBackgroundColor: chartColors.lapisLazuliLight,
                        pointHoverBorderColor: chartColors.lapisLazuliLight,
                        tension: 0.3,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: chartColors.paynesGray,
                                font: {
                                    weight: 'bold'
                                }
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: chartColors.paynesGray
                            },
                            grid: {
                                color: chartColors.columbiaBlue
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: chartColors.paynesGray,
                                callback: function(value) {
                                    return value.toLocaleString('pl-PL', {style: 'currency', currency: 'PLN'});
                                }
                            },
                            grid: {
                                color: chartColors.columbiaBlue
                            }
                        }
                    }
                }
            });

            const hallCtx = document.getElementById('hallRevenueChart').getContext('2d');
            const hallChartColors = [
                chartColors.lapisLazuli,
                chartColors.trueBlue,
                chartColors.paynesGray,
                chartColors.lapisLazuliLight,
                chartColors.paynesGrayLight,
                chartColors.columbiaBlue
            ];

            new Chart(hallCtx, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.RevenueReport.RevenueByHall.Select(h => h.Hall.HallName).ToArray())),
                    datasets: [{
                        data: @Html.Raw(Json.Serialize(Model.RevenueReport.RevenueByHall.Select(h => h.Revenue).ToArray())),
                        backgroundColor: hallChartColors,
                        borderColor: '#ffffff',
                        borderWidth: 2,
                        hoverBorderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                color: chartColors.paynesGray,
                                font: {
                                    weight: 'bold'
                                },
                                padding: 20,
                                usePointStyle: true
                            }
                        },
                        tooltip: {
                            backgroundColor: chartColors.paynesGray,
                            titleColor: '#ffffff',
                            bodyColor: '#ffffff',
                            borderColor: chartColors.trueBlue,
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.parsed;
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = ((value / total) * 100).toFixed(1);
                                    return `${label}: ${value.toLocaleString('pl-PL', {style: 'currency', currency: 'PLN'})} (${percentage}%)`;
                                }
                            }
                        }
                    },
                    cutout: '50%',
                    animation: {
                        animateRotate: true,
                        animateScale: true
                    }
                }
            });

            const charts = document.querySelectorAll('canvas');
            charts.forEach(chart => {
                chart.addEventListener('mouseenter', function() {
                    this.style.cursor = 'pointer';
                });

                chart.addEventListener('mouseleave', function() {
                    this.style.cursor = 'default';
                });
            });

            const observerOptions = {
                threshold: 0.5,
                rootMargin: '0px 0px -50px 0px'
            };

            const chartObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.animation = 'fadeInUp 0.6s ease-out';
                    }
                });
            }, observerOptions);

            charts.forEach(chart => {
                chartObserver.observe(chart.parentElement);
            });
        </script>
    }
}